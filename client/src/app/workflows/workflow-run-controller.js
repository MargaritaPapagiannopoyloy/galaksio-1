(function(){var app=angular.module("workflows.controllers.workflow-run",["common.dialogs","ui.bootstrap","ui.router","ngSanitize","workflows.services.workflow-list","workflows.services.workflow-run","workflows.directives.workflow-run"]);app.controller("WorkflowRunController",function($state,$rootScope,$scope,$http,$stateParams,$timeout,$dialogs,WorkflowList,WorkflowInvocationList,HistoryList){this.retrieveWorkflowDetails=function(workflow_id){$scope.workflow=WorkflowList.getWorkflow(workflow_id);if($scope.workflow!==null){$scope.loadingComplete=false;$http($rootScope.getHttpRequestConfig("GET","workflow-info",{extra:workflow_id})).then(function successCallback(response){for(var attrname in response.data){$scope.workflow[attrname]=response.data[attrname]}$scope.workflow.steps=Object.values($scope.workflow.steps);$scope.diagram=me.generateWorkflowDiagram($scope.workflow.steps);me.updateWorkflowDiagram();$scope.loadingComplete=true},function errorCallback(response){debugger;var message="Failed while retrieving the workflow's details.";$dialogs.showErrorDialog(message,{logMessage:message+" at WorkflowRunController:retrieveWorkflowDetails."});console.error(response.data);$scope.loadingComplete=true})}else{$state.go("workflows")}};this.generateWorkflowDiagram=function(workflow_steps){var step=null,edge_id="",edges={},diagram={nodes:[],edges:[]};if(workflow_steps===undefined){workflow_steps=$scope.workflow.steps}try{for(var i in workflow_steps){step=workflow_steps[i];diagram.nodes.push({id:step.id,label:step.id+1+". "+(step.name||step.label),x:step.position.left,y:step.position.top,step_type:step.type});for(var j in step.input_connections){edge_id=step.id+""+step.input_connections[j].id;if(!edges[edge_id]&&step.input_connections[j].id!==undefined&&step.id!==undefined){edges[edge_id]=true;diagram.edges.push({id:edge_id,source:step.input_connections[j].id,target:step.id,type:"arrow"})}}}}catch(e){debugger}return diagram};this.updateWorkflowDiagram=function(diagram,doLayout){if(diagram===undefined){diagram=$scope.diagram}if($scope.sigma===undefined){$scope.sigma=new sigma({graph:diagram,renderer:{container:document.getElementById("sigmaContainer"),type:"canvas"},settings:{edgeColor:"default",defaultEdgeColor:"#d3d3d3",sideMargin:100,labelAlignment:"bottom"}})}var myPalette={iconScheme:{data_input:{font:"FontAwesome",scale:1,color:"#fff",content:"ï…œ"}},aSetScheme:{7:["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628"]}};var nodeSize=20;var edgeSize=7;if(diagram.nodes.length>15){nodeSize=9;edgeSize=3}else if(diagram.nodes.length>10){nodeSize=15;edgeSize=4}var myStyles={nodes:{size:{by:"size",bins:7,min:nodeSize,max:nodeSize},icon:{by:"step_type",scheme:"iconScheme"},color:{by:"step_type",scheme:"aSetScheme",set:7}},edges:{size:{by:"size",min:edgeSize,max:edgeSize}}};design=sigma.plugins.design($scope.sigma,{styles:myStyles,palette:myPalette});design.apply();if(doLayout===true){sigma.layouts.dagre.configure($scope.sigma,{directed:true,rankdir:"LR",easing:"quadraticInOut",duration:800});sigma.layouts.dagre.start($scope.sigma)}};this.getDownloadLink=function(dataset_url){var fullpath=location.protocol+"//"+location.hostname+(location.port?":"+location.port:"");dataset_url.replace(fullpath,"");dataset_url=$scope.GALAXY_SERVER_URL+dataset_url;return dataset_url};this.cancelButtonHandler=function(){history.back()};this.backButtonHandler=function(){$scope.invocation.current_step--};this.nextStepButtonHandler=function(){if($scope.invocation.valid===true){$scope.invocation.current_step++}};this.executeWorkflowHandler=function(event){if($scope.invocation.valid===false){return}$scope.invocation.current_step++;$scope.invocation.state="sending";$scope.invocation.state_text="Sending to Galaxy...";$scope.invocation.workflow_title=$scope.workflow.name;$scope.invocation.workflow_id=$scope.workflow.id;WorkflowInvocationList.addInvocation($scope.invocation).saveInvocations();var requestData={history:"hist_id="+Cookies.get("current-history"),ds_map:{},parameters:{}};var steps=$scope.workflow.steps;for(var i in steps){if(steps[i].type==="data_input"){requestData.ds_map[steps[i].id]={src:"hda",id:steps[i].inputs[0].value}}else if(steps[i].extra!==undefined){var params=requestData.parameters[steps[i].id]={};var inputs=steps[i].extra.inputs;for(var j in inputs){params[inputs[j].name]=inputs[j].value}}}$timeout(function(){$http($rootScope.getHttpRequestConfig("POST","workflow-run",{extra:$scope.workflow.id,headers:{"Content-Type":"application/json; charset=utf-8"},data:requestData})).then(function successCallback(response){delete response.data.state;delete response.data.workflow_id;for(var attrname in response.data){$scope.invocation[attrname]=response.data[attrname]}WorkflowInvocationList.saveInvocations()},function errorCallback(response){$scope.invocation.state="error";$scope.invocation.state_text="Failed."})},2e3)};this.layoutDiagramHandler=function(){this.updateWorkflowDiagram($scope.diagram,true)};var me=this;$scope.loadingComplete=false;$scope.workflow=null;$scope.filterInputSteps=function(item){return item.type==="data_input"||item.type==="tool"&&(item.tool_id==="upload_workflows"||item.tool_id==="irods_pull")};$scope.filterNotInputSteps=function(item){return!$scope.filterInputSteps(item)};$scope.adjustValueString=function(input){var input_value=input.value;if(input.type==="data"){return"Output dataset from Step "+(this.step.input_connections[input.name].id+1)}else if(input.type==="repeat"){var inputValue="";try{inputValue=JSON.parse(this.step.tool_state)[input.name].replace(/(^\"|\"$)/g,"");inputValue=JSON.parse(inputValue)}catch(err){}var value="";var _key;for(var i in inputValue){for(var j in inputValue[i]){_key=input.name+"_"+inputValue[i]["__index__"]+"|"+j;if(this.step.input_connections[_key]!==undefined){value+="Output dataset from step "+(this.step.input_connections[_key].id+1)}}}return value}else{if(input_value instanceof Object){debugger}else{return""+input_value}}};$scope.findFileName=function(file_id){if($scope.displayedHistory===undefined){$scope.displayedHistory=HistoryList.getHistory(Cookies.get("current-history"))}var files=$scope.displayedHistory.content;for(var i in files){if(files[i].id===file_id){return files[i].name}}return"Unknown input file"};if($stateParams.invocation_id!==null){$scope.invocation=WorkflowInvocationList.getInvocation($stateParams.invocation_id)}else{$scope.invocation=WorkflowInvocationList.getNewInvocation()}this.retrieveWorkflowDetails($stateParams.id)});app.controller("WorkflowRunStepController",function($rootScope,$scope,$http,$sanitize,$uibModal,$stateParams,$dialogs,WorkflowList,HistoryList,APP_EVENTS){this.showDatasetSelectorDialog=function(stepInstance,isUpload){$scope.active=isUpload?1:0;var modalInstance=$uibModal.open({templateUrl:"app/datasets/dataset-selector-dialog.tpl.html",scope:$scope,size:"lg"});modalInstance.result.then(function(selectedItem){try{stepInstance.inputs[0].value=selectedItem[0].id}catch(e){}});return this};$scope.$on(APP_EVENTS.historyChanged,function(event,args){$scope.displayedHistory=HistoryList.getHistory(Cookies.get("current-history"))});this.toogleCollapseHandler=function(event){$scope.collapsed=!$scope.collapsed;if(!$scope.loadingComplete){if($scope.step.type!=="data_input"){$http($rootScope.getHttpRequestConfig("GET","tools-info",{extra:$scope.step.tool_id,params:{history_id:Cookies.get("current-history")}})).then(function successCallback(response){$scope.step["extra"]=response.data;$scope.loadingComplete=true},function errorCallback(response){debugger;var message="Failed while retrieving the details for the tool.";$dialogs.showErrorDialog(message,{logMessage:message+" at WorkflowRunController:toogleCollapseHandler."});console.error(response.data)})}else{$scope.displayedHistory=HistoryList.getHistory(Cookies.get("current-history"));$scope.loadingComplete=true}}};$scope.showStepHelp=function(){if($scope.helpHtml===undefined){$scope.helpHtml=$sanitize($scope.step.extra.help+'<a style="color: #e61669;" class="clickable" ng-click="isCollapsed=!isCollapsed;"> Hide help</a>')}};$scope.loadingComplete=false;$scope.collapsed=true});app.controller("WorkflowInvocationListController",function($state,$rootScope,$scope,$http,$interval,$dialogs,WorkflowInvocationList,APP_EVENTS){this.checkInvocationsState=function(){var invocations=WorkflowInvocationList.getInvocations();var running=0,erroneous=0,done=0;for(var i in invocations){if(invocations[i].state=="working"){running++}else if(invocations[i].state=="sending"){running++}else if(invocations[i].state=="success"){done++}else if(invocations[i].state=="error"){erroneous++}else if(invocations[i].state=="failed"){erroneous++}else{debugger}}$scope.invocations=WorkflowInvocationList.getInvocations();$scope.running=running;$scope.done=done;$scope.erroneous=erroneous;if($scope.checkInterval===true){for(var i in invocations){me.checkInvocationState(invocations[i])}WorkflowInvocationList.saveInvocations()}};this.checkInvocationState=function(invocation){if(invocation.state!="error"&&(invocation.state!=="success"||invocation.hasOutput!==true)){$http($rootScope.getHttpRequestConfig("GET","invocation-state",{extra:[invocation.workflow_id,invocation.id]})).then(function successCallback(response){var erroneousSteps=0;var waitingSteps=0;var runningSteps=0;var doneSteps=0;var queuedSteps=0;delete response.data.state;delete response.data.workflow_id;for(var attrname in response.data){invocation[attrname]=response.data[attrname]}for(var i in invocation.steps){if(invocation.steps[i].state===null||invocation.steps[i].state==="ok"){doneSteps++}else if(invocation.steps[i].state==="queued"){queuedSteps++}else if(invocation.steps[i].state==="new"){waitingSteps++}else if(invocation.steps[i].state==="running"){runningSteps++}else if(invocation.steps[i].state==="error"){erroneousSteps++}else{debugger;erroneousSteps++}}if(runningSteps>0||waitingSteps>0||queuedSteps>0){invocation.state="working";invocation.state_text="Running your workflow..."}else if(erroneousSteps>0){invocation.state="error";invocation.state_text="Failed..."}else if(invocation.state!=="sending"){invocation.state_text="Done!!";invocation.state="success";me.recoverWorkflowResults(invocation)}},function errorCallback(response){invocation.state="error";invocation.state_text="Failed."})}};this.recoverWorkflowInvocation=function(invocation){$state.go("workflowDetail",{id:invocation.workflow_id,invocation_id:invocation.id})};this.recoverWorkflowResults=function(invocation){for(var i in invocation.steps){if(invocation.steps[i].job_id!==null){me.recoverWorkflowResultStepDetails(invocation,invocation.steps[i])}}};this.recoverWorkflowResultStepDetails=function(invocation,step){$http($rootScope.getHttpRequestConfig("GET","invocation-result",{extra:[invocation.workflow_id,invocation.id,step.id]})).then(function successCallback(response){step.outputs=response.data.outputs;invocation.hasOutput=true;for(var j in step.outputs){me.recoverWorkflowResultStepOutputDetails(invocation,step,step.outputs[j])}},function errorCallback(response){debugger;var message="Failed while retrieving the details for the step.";$dialogs.showErrorDialog(message,{logMessage:message+" at WorkflowRunController:recoverWorkflowResultStepDetails."});console.error(response.data)})};this.recoverWorkflowResultStepOutputDetails=function(invocation,step,output){$http($rootScope.getHttpRequestConfig("GET","dataset-details",{extra:[output.id]})).then(function successCallback(response){output.name=response.data.name;output.extension=response.data.extension;output.url=response.data.download_url},function errorCallback(response){debugger;var message="Failed while retrieving the details for the workflow results.";$dialogs.showErrorDialog(message,{logMessage:message+" at WorkflowRunController:recoverWorkflowResultStepOutputDetails."});console.error(response.data)})};$scope.$on(APP_EVENTS.loginSuccess,function(event,args){WorkflowInvocationList.recoverInvocations()});$scope.$on("$destroy",function(){console.log("Removing interval");$interval.cancel(me.checkInvocationInterval)});var me=this;$scope.invocations=WorkflowInvocationList.recoverInvocations().getInvocations();$scope.running=0;$scope.done=0;$scope.erroneous=0;$scope.checkInterval=false;this.checkInvocationInterval=null;me.checkInvocationsState();me.checkInvocationInterval=$interval(me.checkInvocationsState,5e3)})})();